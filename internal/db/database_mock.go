// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/database_contract.go
//
// Generated by this command:
//
//	mockgen -source=./internal/db/database_contract.go -destination=./internal/db/database_mock.go -package=db
//

// Package db is a generated GoMock package.
package db

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDatabase) Connect() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabase)(nil).Connect))
}

// ConnectDB mocks base method.
func (m *MockDatabase) ConnectDB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDB indicates an expected call of ConnectDB.
func (mr *MockDatabaseMockRecorder) ConnectDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDB", reflect.TypeOf((*MockDatabase)(nil).ConnectDB))
}

// GetCreateDatabaseSQL mocks base method.
func (m *MockDatabase) GetCreateDatabaseSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateDatabaseSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCreateDatabaseSQL indicates an expected call of GetCreateDatabaseSQL.
func (mr *MockDatabaseMockRecorder) GetCreateDatabaseSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateDatabaseSQL", reflect.TypeOf((*MockDatabase)(nil).GetCreateDatabaseSQL))
}

// GetCreateMigrationTableSQL mocks base method.
func (m *MockDatabase) GetCreateMigrationTableSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateMigrationTableSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCreateMigrationTableSQL indicates an expected call of GetCreateMigrationTableSQL.
func (mr *MockDatabaseMockRecorder) GetCreateMigrationTableSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateMigrationTableSQL", reflect.TypeOf((*MockDatabase)(nil).GetCreateMigrationTableSQL))
}

// GetDatabaseExistsSQL mocks base method.
func (m *MockDatabase) GetDatabaseExistsSQL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseExistsSQL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseExistsSQL indicates an expected call of GetDatabaseExistsSQL.
func (mr *MockDatabaseMockRecorder) GetDatabaseExistsSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseExistsSQL", reflect.TypeOf((*MockDatabase)(nil).GetDatabaseExistsSQL))
}
